generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pg_trgm]
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "ERD.svg"
  disabled = env("DISABLE_ERD")
}

model Company {
  id                   Int       @id @default(autoincrement())
  name                 String    @map("name")
  registrationNo       String    @unique @map("registration_no")
  parentRegNo          String?   @map("parent_reg_no") // 有值表示分公司
  representative       String?   @map("representative")
  registrationCountry  String?   @map("registration_country")
  establishedDate      DateTime? @map("established_date")
  capitalAmount        Decimal?  @db.Decimal(30,8) @map("capital_amount")
  paidInCapital        Decimal?  @db.Decimal(30,8) @map("paid_in_capital")
  capitalRanking       Int?      @map("capital_ranking")
  address              String?   @map("address")
  websiteUrl           String?   @map("website_url")
  logoUrl              String?   @map("logo_url")
  registrationAgency   String?   @map("registration_agency")
  status               String?   @map("status")
  organizationType     String?   @map("organization_type")
  businessItems        Json?     @map("business_items")
  contributions        Json?     @map("contributions")
  shareholdingStatus   String?   @map("shareholding_status")
  sharePrice           Decimal?  @db.Decimal(30,8) @map("share_price")
  totalIssuedShares    BigInt?   @map("total_issued_shares")
  multipleVotingRights String?   @map("multiple_voting_rights")
  specialVotingRights  String?   @map("special_voting_rights")
  lastChangeDate       DateTime? @map("last_change_date")
  lastApprovedChange   DateTime? @map("last_approved_change")
  statusDate           DateTime? @map("status_date")
  statusDocNo          String?   @map("status_doc_no")
  foreignCompanyName   String?   @map("foreign_company_name")
  directors            Json?     @map("directors")
  managers             Json?     @map("managers")
  suspensionStartDate  DateTime? @map("suspension_start_date")
  suspensionEndDate    DateTime? @map("suspension_end_date")
  suspensionAgency     String?   @map("suspension_agency")
  oldBusinessItemsUrl  String?   @map("old_business_items_url")

  industryCodes            IndustryCode[]     @relation("CompanyIndustry")
  investors                CompanyInvestor[]
  histories                CompanyHistory[]
  relatedCompaniesAsSource RelatedCompany[]   @relation("CompanyToRelatedCompany")
  relatedCompaniesAsTarget RelatedCompany[]   @relation("CompanyToRelatedCompanyTarget")
  stockPrices              StockPrice[]
  marketIndicators         MarketIndicator[]
  riskFlags                RiskFlag[]
  importExportData         ImportExportData[]
  governmentTenders        GovernmentTender[]
  trademarks               Trademark[]
  patents                  Patent[]
  financialReports         FinancialReport[]
  announcements            Announcement[]
  comments                 Comment[]
  businessScopes           BusinessScope[]
  news                     News[]
  relationsAsParent        CompanyRelation[] @relation("ParentRelations")
  relationsAsChild         CompanyRelation[] @relation("ChildRelations")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  // Info: (20250811 - Tzuhan) name 的 trigram GIN 索引
  @@index([name(ops: raw("gin_trgm_ops"))], type: Gin, map: "idx_company_name_trgm")
  // Info: (20250811 - Tzuhan) registrationNo 的前綴查詢最佳化，在非 C collation 下，用 text_pattern_ops 保證 LIKE 'xxx%' 穩定吃到索引
  @@index([registrationNo(ops: raw("text_pattern_ops"))], map: "idx_company_regno_pattern")

  @@map("company")
}

model CompanyRelation {
  id          Int      @id @default(autoincrement())
  parentRegNo String   @map("parent_reg_no")
  childRegNo  String   @map("child_reg_no")
  relation    String?  @map("relation")

  parentCompany Company @relation("ParentRelations", fields: [parentRegNo], references: [registrationNo])
  childCompany  Company @relation("ChildRelations", fields: [childRegNo], references: [registrationNo])

  @@unique([parentRegNo, childRegNo])
  @@map("company_relation")
}



model Investor {
  id              Int     @id @default(autoincrement())
  name            String  @map("name")
  title           String? @map("title")
  shareholderType String? @map("shareholder_type")

  companyInvestors CompanyInvestor[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@map("investor")
}

model CompanyInvestor {
  id                            Int       @id @default(autoincrement())
  companyId                     Int       @map("company_id")
  investorId                    Int       @map("investor_id")
  position                      String?   @map("position")
  shareRatio                    Decimal?  @map("share_ratio")
  representativeJuridicalPerson String?   @map("representative_juridical_person")
  investmentDate                DateTime? @map("investment_date")

  company  Company  @relation(fields: [companyId], references: [id])
  investor Investor @relation(fields: [investorId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@unique([companyId, investorId])
  @@map("company_investor")
}

model CompanyHistory {
  id           Int      @id @default(autoincrement())
  companyId    Int      @map("company_id")
  changeDate   DateTime @map("change_date")
  changeType   String   @map("change_type")
  changeDetail Json     @map("change_detail")

  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@map("company_history")
}

model RelatedCompany {
  id                Int     @id @default(autoincrement())
  companyId         Int     @map("company_id")
  relatedCompanyId  Int     @map("related_company_id")
  relationType      String? @map("relation_type")
  relatedBusinessId String? @map("related_business_id")

  company        Company @relation("CompanyToRelatedCompany", fields: [companyId], references: [id])
  relatedCompany Company @relation("CompanyToRelatedCompanyTarget", fields: [relatedCompanyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@unique([companyId, relatedCompanyId])
  @@map("related_company")
}

model StockPrice {
  id         Int      @id @default(autoincrement())
  companyId  Int      @map("company_id")
  date       DateTime @map("date")
  openPrice  Decimal? @db.Decimal(30,8) @map("open_price")
  highPrice  Decimal? @db.Decimal(30,8) @map("high_price")
  lowPrice   Decimal? @db.Decimal(30,8) @map("low_price")
  closePrice Decimal? @db.Decimal(30,8) @map("close_price")
  volume     Int?     @map("volume")

  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@index([companyId, date])
  @@map("stock_price")
}

model MarketIndicator {
  id                Int      @id @default(autoincrement())
  companyId         Int      @map("company_id")
  date              DateTime @map("date")
  marketCap         Decimal? @map("market_cap")
  peRatio           Decimal? @map("pe_ratio")
  dividendYield     Decimal? @map("dividend_yield")
  investorSentiment Json?    @map("investor_sentiment")

  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@index([companyId, date])
  @@map("market_indicator")
}

model RiskFlag {
  id          Int      @id @default(autoincrement())
  companyId   Int      @map("company_id")
  flagType    String   @map("flag_type")
  flagValue   Int      @map("flag_value")
  flaggedDate DateTime @map("flagged_date")

  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@map("risk_flag")
}

model IndustryCode {
  id          Int     @id @default(autoincrement())
  code        String  @unique @map("code")
  description String? @map("description")

  companies Company[] @relation("CompanyIndustry")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@map("industry_code")
}

model ImportExportData {
  id          Int      @id @default(autoincrement())
  companyId   Int      @map("company_id")
  year        Int      @map("year")
  month       String?  @map("month")
  totalImport Decimal? @map("total_import")
  totalExport Decimal? @map("total_export")

  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@map("import_export_data")
}

model GovernmentTender {
  id           Int       @id @default(autoincrement())
  companyId    Int       @map("company_id")
  projectTitle String    @map("project_title")
  agencyName   String?   @map("agency_name")
  awardDate    DateTime? @map("award_date")
  awardAmount  Decimal?  @map("award_amount")
  awarded      Boolean?  @map("awarded")

  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@map("government_tender")
}

model Trademark {
  id          Int     @id @default(autoincrement())
  companyId   Int     @map("company_id")
  imageUrl    String? @map("image_url")
  name        String  @map("name")
  description String? @map("description")

  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@map("trademark")
}

model Patent {
  id          Int     @id @default(autoincrement())
  companyId   Int     @map("company_id")
  name        String  @map("name")
  description String? @map("description")

  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@map("patent")
}

model FinancialReport {
  id         Int      @id @default(autoincrement())
  companyId  Int      @map("company_id")
  reportType String   @map("report_type")
  period     DateTime @map("period")
  data       Json     @map("data")

  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@index([companyId, reportType, period])
  @@map("financial_report")
}

model Announcement {
  id        Int      @id @default(autoincrement())
  companyId Int      @map("company_id")
  title     String   @map("title")
  date      DateTime @map("date")
  content   String?  @map("content")

  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@map("announcement")
}

model BusinessScope {
  id          Int     @id @default(autoincrement())
  companyId   Int     @map("company_id")
  code        String  @map("code")
  description String? @map("description")

  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@index([companyId, code])
  @@map("business_scope")
}

model News {
  id        Int      @id @default(autoincrement())
  companyId Int      @map("company_id")
  title     String   @map("title")
  content   String?  @map("content")
  date      DateTime @map("date")
  imageUrl  String?  @map("image_url")

  company Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  @@index([companyId, date])
  @@map("news")
}

model Comment {
  id         Int       @id @default(autoincrement())
  companyId  Int       @map("company_id")
  userName   String?   @map("user_name")
  userAvatar String?   @map("user_avatar")
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt      @map("updated_at")
  likes      Int       @default(0)
  comments   Int       @default(0)
  shares     Int       @default(0)
  parentId   Int?      @map("parent_id")
  company    Company   @relation(fields: [companyId], references: [id])
  replies    Comment[] @relation("CommentReplies")
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id])

  @@index([companyId, createdAt])
  @@map("comment")
}

model ImportLog {
  id           Int       @id @default(autoincrement())
  folderPath   String    @map("folder_path")
  fileName     String    @map("file_name")
  totalCount   Int       @map("total_count")
  successCount Int       @map("success_count")
  status       String    @map("status") // pending, in_progress, completed, failed
  startedAt    DateTime? @map("started_at")
  finishedAt   DateTime? @map("finished_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt      @map("updated_at")

  @@unique([folderPath, fileName], name: "folder_file_unique")
  @@map("import_log")
}

